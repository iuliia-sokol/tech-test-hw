{"version":3,"file":"static/js/979.a16e5ade.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","components/Card/Card.styled.js","services/fetchUsers.js","components/Card/Card.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ButtonMain = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding: 14px;\n\n  width: 196px;\n  height: 50px;\n \n  border: none;\n  border-radius: ${p => p.theme.radii.btn};\n  box-shadow: ${p => p.theme.colors.btnBoxShadow};\n  background-color: ${p => p.selected? p.theme.colors.accentGreen : p.theme.colors.mainLight };\n  transition: ${p => p.theme.transitions.main};\n\n  // Hover\n  background-color: ${p => p.selected? p.theme.colors.mainLight : p.theme.colors.accentGreen };\n`;\n\nexport const ButtonText = styled.span`\n   font-family: ${p => p.theme.fonts.main};\n   font-weight: ${p => p.theme.fontWeights[1]};\n   font-size: ${p => p.theme.fontSizes.m};\n   line-height: ${p => p.theme.lineHeights.main};\n   color: ${p => p.theme.colors.mainDark};\n   text-align: center;\n\n  text-transform: uppercase;\n`;\n","import { ButtonMain, ButtonText } from './Button.styled';\n\nexport const ButtonUI = ({ text, onClick, selected }) => {\n    return (\n      <ButtonMain type='button' selected={selected} onClick={onClick}>\n        <ButtonText>{text}</ButtonText>\n      </ButtonMain>\n    );\n  };","import styled from 'styled-components';\n\nexport const CardBox = styled.li`\nposition: relative;\nbox-sizing:border-box;\nwidth:380px;\nheight:460px;\ndisplay:flex;\nflex-direction:column;\nalign-items:center;\njustify-content:space-between;\npadding:28px 36px 36px 36px;\nbackground: ${p => p.theme.colors.bgViolet};\nbox-shadow: ${p => p.theme.colors.cardBoxShadow};\nborder-radius: ${p => p.theme.radii.card};\ntransition:${p => p.theme.transitions.main};\ntransition-duration:350ms;\n\n&:hover {\n    transform:scale(1.03);\n}\n`\n\nexport const LogoWrapper = styled.div`\nposition:absolute;\ntop:20px;\nleft:20px;\ndisplay:flex;\njustify-content:center;\n\n& img {\n    width:76px;\n    height:22px;\n}\n`\n\nexport const TopImage = styled.img`\nwidth:308px;\nheight:168px;\n`\n\nexport const TextWrapper= styled.div`\nflex-direction:column;\nalign-items:center;\njustify-content:center;\n\nrow-gap:16px;\nmargin-bottom:26px;\n`\n\nexport const TextData = styled.p`\ntext-align:center;\ncolor: ${p => p.theme.colors.mainLight};\nfont-family: ${p => p.theme.fonts.main};\nfont-size: ${p => p.theme.fontSizes.l};\ntext-transform:uppercase;\n\n&:not(:last-of-type){\n    margin-bottom:16px;\n}\n`\n\nexport const AvatarWrapper = styled.div`\nposition: relative;\ndisplay:flex;\nflex-direction:column;\nalign-items:center;\njustify-content:center;\nmargin-bottom:26px;\nborder-radius: ${p => p.theme.radii.circle};\n\n`\nexport const Avatar = styled.img`\nborder-radius: ${p => p.theme.radii.circle};\nz-index:2;\n`\n\nexport const AvatarCircle = styled.img`\nposition:absolute;\nz-index:20;\n`\n\nexport const AvatarLine = styled.img`\nposition:absolute;\nz-index:0;\n`","import axios from \"axios\";\n\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL\n\n\n\nexport const fetchAllUsers = async (page,per_page) => {\n    try {\n        if (page && per_page) {\n        return await axios\n          .get(`users/?page=${page}&limit=${per_page}`)\n          .then(({ data }) => {\n            return data;\n          });\n      }\n      return await axios.get(`users`).then( ({ data }) => {\n           return data;\n      });\n    }\n    catch(err) {\n        console.log(err);\n    }\n  };\n\n  export const updateUserData = async(id,body)=>{\n   try{\n    await axios.put(`users/${id}`, {...body}).then( ({ data }) => {\n     return data;\n    })}\n    catch(err) {\n        console.log(err);\n    }\n  }","import { useState } from \"react\";\nimport { ButtonUI } from \"components/Button/Button\";\nimport { Avatar, AvatarCircle, AvatarLine, AvatarWrapper, CardBox, LogoWrapper, TextData, TextWrapper, TopImage } from \"./Card.styled\";\nimport { updateUserData } from \"services/fetchUsers\";\n\nimport logo from '../../images/logo-min.png';\nimport top from '../../images/top-min.png';\nimport ellipse from '../../images/ellipse-min.png';\nimport line from '../../images/line-min.png';\n\n\nexport const CardUI = ({ id, user,avatar,followed,tweets,followers }) => {\n    const [selection, setSelection] = useState(followed)\n    const [followersCount, setFollowersCount] = useState(followers)\n   \n\n    const handleBtnClick = () => {\n        setSelection(!selection)\n        if(selection) {\n            updateUserData(id,{user,avatar,followed:!selection,tweets, followers: followersCount-1})\n            setFollowersCount(followersCount-1)\n\n        }\n        if(!selection) {\n            updateUserData(id,{user,avatar,followed:!selection,tweets, followers: followersCount+1})\n            setFollowersCount(followersCount+1)\n        }    \n    }\n\n    return (\n      <CardBox key={id}>\n        <LogoWrapper>\n            <img src={logo} alt=\"logo\"/>\n        </LogoWrapper>\n        <TopImage alt=\"decoration\" src={top}/>\n\n        <AvatarWrapper>\n            <AvatarLine  alt='line' src={line} height={8}/>\n            <AvatarCircle  alt='frame' src={ellipse} width={80} height={80} />\n           <Avatar src={avatar} alt={user} width={62} height={62}/>\n        </AvatarWrapper>\n        <TextWrapper>\n        <TextData>{tweets.length} tweets</TextData>\n        <TextData>{followersCount.toLocaleString('en-US')} followers</TextData>\n        </TextWrapper>\n        <ButtonUI text={selection? \"Following\" : \"Follow\"} onClick={handleBtnClick} selected={selection}/>\n      </CardBox>\n    );\n  };","import styled from \"styled-components\";\n\nexport const UsersList = styled.ul`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\nrow-gap:26px;\nalign-items: center;\njustify-items:center;\n`\n\nexport const LoadMoreBtnWrapper = styled.div`\ndisplay:flex;\njustify-content:center;\nmargin-top:26px;\n`","import { CardUI } from \"components/Card/Card\";\nimport { Container } from \"components/Container/Container\";\nimport { useEffect, useState } from \"react\";\nimport { fetchAllUsers } from \"services/fetchUsers\";\nimport { LoadMoreBtnWrapper, UsersList } from \"./Home.styled\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { ButtonUI } from \"components/Button/Button\";\n\nconst Homepage = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [showLoadMoreBtn, setShowLoadMoreBtn] = useState(false)\n  const [users, setUsers] = useState([])\n  const [pageNumber, setPageNumber] = useState(1)\n  const PER_PAGE = 12\n\n    useEffect(() => {  \n        const getUsers = async ({page,per_page})=>{\n            try{\n                setIsLoading(true)\n            return await fetchAllUsers(page,per_page).then((data) => {\n            data.length >= PER_PAGE ? setShowLoadMoreBtn(true) :  setShowLoadMoreBtn(false)\n            setUsers([...users, ...data])}\n            )}\n            catch(err) {console.log(err)}\n            finally{\n                setIsLoading(false)\n            }\n         }\n       \n        getUsers({page:pageNumber, per_page:PER_PAGE})\n        // eslint-disable-next-line\n      }, [pageNumber]);\n\n    const handleLoadMore =() =>{\n        setPageNumber(pageNumber+1)\n    }\n\n    return (\n    <main>\n        <Container>\n        {isLoading && <Loader/>}\n        <UsersList>\n        {users.length>0 && users.map(({id, user, avatar,followers,tweets, followed}) => <CardUI key={id} id={id} tweets={tweets} followers={followers} followed={followed} user={user} avatar={avatar} />)}\n        </UsersList>\n\n         {showLoadMoreBtn &&<LoadMoreBtnWrapper>\n            <ButtonUI text='Load more' onClick={handleLoadMore}/>\n        </LoadMoreBtnWrapper>}\n        </Container>\n    </main>)\n}\n\nexport default Homepage;"],"names":["ButtonMain","styled","p","theme","radii","btn","colors","btnBoxShadow","selected","accentGreen","mainLight","transitions","main","ButtonText","fonts","fontWeights","fontSizes","m","lineHeights","mainDark","ButtonUI","text","onClick","type","CardBox","bgViolet","cardBoxShadow","card","LogoWrapper","TopImage","TextWrapper","TextData","l","AvatarWrapper","circle","Avatar","AvatarCircle","AvatarLine","axios","process","fetchAllUsers","page","per_page","then","data","console","log","updateUserData","id","body","CardUI","user","avatar","followed","tweets","followers","useState","selection","setSelection","followersCount","setFollowersCount","src","alt","height","width","length","toLocaleString","UsersList","LoadMoreBtnWrapper","isLoading","setIsLoading","showLoadMoreBtn","setShowLoadMoreBtn","users","setUsers","pageNumber","setPageNumber","useEffect","getUsers","Container","Loader","map"],"sourceRoot":""}